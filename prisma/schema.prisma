generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

 id        String   @id @default(cuid())
  email     String   @unique
  password  String 
  avatar               String?
  name                 String?
  surname              String?
  username           String
  description          String?
  city                 String?
  country              String?
  createdAt            DateTime         @default(now())
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  stories              Story[]
  work                 String?
  followers            Follower[]       @relation("UserFollowers")
  followings           Follower[]       @relation("UserFollowings")
  followRequestsSent   FollowRequest[]  @relation("followRequestsSent")
>>>>>>> 891302bcfb461bf019cf6265e2051df648db1fa6
  followRequestsReceived FollowRequest[] @relation("followRequestsReceived")
  followRequestsSent     FollowRequest[] @relation("followRequestsSent")
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  likes                  Like[]
  posts                  Post[]
  stories                Story?
  cover                  String?
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("followRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("followRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockedId String
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

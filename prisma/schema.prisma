// 1️⃣ Generator
generator client {
  provider = "prisma-client-js"
}

// 2️⃣ Datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3️⃣ Models
model User {
  id                   String           @id @unique
  avatar               String?
  name                 String?
  surname              String?
  description          String?
  city                 String?
  country              String?
  createdAt            DateTime         @default(now())
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  stories              Story[]
  work                 String?
  followers            Follower[]       @relation("UserFollowers")
  followings           Follower[]       @relation("UserFollowings")
  followRequestsSent   FollowRequest[]  @relation("followRequestsSent")
  followRequestsReceived FollowRequest[] @relation("followRequestsReceived")
  blocksSent           Block[]          @relation("BlocksSent")
  blocksReceived       Block[]          @relation("BlocksReceived")
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  userId    String // Changed from Int to String to match User.id
}

model Comment {
  id        Int       @id @default(autoincrement())
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
  userId    String    // Changed to String
  postId    Int
}

model Like {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade) // Made optional
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String    // Changed to String
  postId    Int?      // This remains optional
  commentId Int?
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String 
  
  sender     User     @relation("followRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("followRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
}

model Block {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  blockedId  String
  blockerId  String
  
  blocker    User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked    User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
}

model Follower {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  followerId   String
  followingId  String
  
  follower     User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following    User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}